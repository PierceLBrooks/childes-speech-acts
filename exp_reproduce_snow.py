import pickle

import matplotlib.pyplot as plt

import pandas as pd

import seaborn as sns

import numpy as np

from age_of_acquisition import get_fraction_producing_speech_acts
from preprocess import SPEECH_ACT, CHILD, ADULT
from utils import age_bin, calculate_frequencies

AGES = [14, 20, 32]

MAX_NUM_SPEECH_ACT_TYPES = 25

MAX_TRANSCRIPT_LENGTH = 1000
MIN_TRANSCRIPT_LENGTH = 100
TRANSCRIPTS_CHILDES = [2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3503, 3505, 3513, 3515, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3575, 3576, 3578, 3580, 3582, 3586, 3587, 3588, 3589, 3591, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3685, 3686, 3687, 3688, 3690, 3692, 3694, 3696, 3698, 3700, 3701, 3702, 3704, 3707, 3710, 3711, 3712, 3713, 3715, 3717, 3737, 3738, 3771, 3772, 3774, 3981, 3982, 3985, 3986, 3987, 3988, 3989, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4002, 4003, 4004, 4005, 4012, 4016, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4037, 4038, 4039, 4040, 4041, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4052, 4053, 4054, 4055, 4056, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4151, 4152, 4153, 4154, 4155, 4156, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4189, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4203, 4205, 4206, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4227, 4228, 4229, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4261, 4262, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4274, 4317, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4361, 4362, 4363, 4364, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4380, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4392, 4393, 4394, 4395, 4396, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4442, 4443, 4444, 4446, 4447, 4448, 4449, 4450, 4451, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4502, 4503, 4504, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4566, 4567, 4623, 4637, 4638, 4639, 4640, 4641, 4643, 4644, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4655, 4656, 4658, 4659, 4660, 4662, 4663, 4664, 4665, 4666, 4667, 4669, 4670, 4671, 4673, 4674, 4675, 4676, 4677, 4678, 4680, 4681, 4682, 4683, 4685, 4687, 4688, 4689, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4701, 4703, 4704, 4705, 4706, 4707, 4710, 4711, 4713, 4714, 4715, 4716, 4717, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4804, 4821, 4856, 4858, 4860, 4861, 4865, 4866, 4870, 4871, 4872, 4874, 4875, 4876, 4879, 4880, 4882, 4886, 4888, 4889, 4894, 4895, 4897, 4898, 4900, 4902, 4904, 4905, 4906, 4909, 4913, 4914, 4916, 4917, 4919, 4920, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4931, 4932, 4933, 4934, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4948, 4949, 4950, 4951, 4953, 4954, 4955, 4956, 4957, 4958, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4980, 5007, 5008, 5009, 5011, 5012, 5015, 5016, 5017, 5019, 5021, 5022, 5023, 5024, 5025, 5027, 5028, 5031, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5044, 5046, 5047, 5049, 5050, 5051, 5052, 5053, 5054, 5056, 5057, 5059, 5060, 5061, 5062, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5074, 5075, 5079, 5080, 5091, 5093, 5095, 5100, 5102, 5108, 5109, 5110, 5114, 5118, 5121, 5125, 5131, 5133, 5138, 5142, 5144, 5145, 5148, 5149, 5155, 5160, 5162, 5163, 5165, 5168, 5170, 5171, 5174, 5175, 5177, 5178, 5179, 5180, 5183, 5187, 5188, 5191, 5194, 5196, 5200, 5205, 5206, 5207, 5208, 5209, 5213, 5214, 5215, 5216, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5246, 5247, 5248, 5250, 5251, 5253, 5254, 5255, 5256, 5257, 5258, 5260, 5261, 5263, 5264, 5265, 5268, 5269, 5270, 5273, 5274, 5275, 5277, 5279, 5280, 5281, 5282, 5284, 5285, 5287, 5288, 5289, 5292, 5293, 5297, 5298, 5300, 5301, 5302, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5318, 5319, 5321, 5322, 5324, 5325, 5327, 5329, 5331, 5333, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5350, 5351, 5354, 5355, 5358, 5359, 5360, 5363, 5364, 5365, 5366, 5369, 5387, 5406, 5414, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5447, 5449, 5450, 5451, 5452, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5467, 5468, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5487, 5488, 5489, 5490, 5491, 5492, 5494, 5495, 5496, 5497, 5498, 5499, 5501, 5502, 5503, 5504, 5505, 5507, 5508, 5510, 5511, 5512, 5513, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5562, 5564, 5565, 5566, 5567, 5568, 5569, 5579, 5584, 5585, 5586, 5587, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5600, 5602, 5603, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5646, 5648, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5777, 5781, 5782, 5784, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5822, 5824, 5825, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 10293, 10295, 10296, 10297, 10298, 10299, 10300, 10301, 10302, 10303, 10304, 10305, 10306, 10308, 10311, 10312, 10313, 10314, 10315, 10316, 10317, 10319, 10320, 10321, 10322, 10323, 10324, 10325, 10326, 10327, 10328, 10329, 10330, 10331, 10332, 10333, 10334, 10335, 10336, 10337, 10338, 10339, 10340, 10341, 10342, 10343, 10345, 10346, 10347, 10349, 10350, 10351, 10352, 10353, 10354, 10355, 10356, 10357, 10358, 10359, 10360, 10361, 10362, 10363, 10364, 10365, 10367, 10368, 10369, 10370, 10371, 10372, 10373, 10374, 10376, 10377, 10378, 10379, 10380, 10381, 10382, 10383, 10384, 10385, 10386, 10387, 10388, 10389, 10390, 10391, 10392, 10393, 10394, 10395, 10396, 10397, 10398, 10399, 10400, 10401, 10402, 10403, 10404, 10405, 10406, 10407, 10408, 10409, 10410, 10411, 10412, 10413, 10414, 10415, 10416, 10417, 10418, 10419, 10420, 10421, 10423, 10424, 10425, 10426, 10427, 10428, 10429, 10430, 10431, 10432, 10434, 10435, 10436, 10437, 10438, 10440, 10441, 10442, 10443, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10452, 10453, 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462, 10463, 10464, 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10472, 10473, 10474, 10475, 10476, 10477, 10478, 10479, 10480, 10481, 10482, 10483, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10491, 10492, 10493, 10494, 10495, 10496, 10497, 10498, 10499, 10500, 10501, 10502, 10503, 10504, 10505, 10506, 10507, 10508, 10509, 10510, 10511, 10512, 10513, 10514, 10515, 10516, 10517, 10518, 10519, 10520, 10521, 10522, 10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10532, 10533, 10534, 10535, 10536, 10537, 10539, 10540, 10541, 10542, 10543, 10544, 10545, 10546, 10547, 10548, 10549, 10550, 10551, 10552, 10553, 10554, 10555, 10556, 10557, 10558, 10559, 10560, 10561, 10562, 10563, 10564, 10565, 10566, 10567, 10568, 10570, 10571, 10572, 10573, 10574, 10575, 10576, 10577, 10578, 10579, 10580, 10581, 10582, 10583, 10584, 10585, 10586, 10587, 10588, 10589, 10590, 10591, 10592, 10593, 10594, 10595, 10596, 10597, 10598, 10599, 10600, 10601, 10602, 10603, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10622, 10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630, 10631, 10632, 10633, 10634, 10635, 10637, 10638, 10639, 10641, 10642, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10653, 10654, 10655, 10656, 10657, 10659, 10660, 10661, 10662, 10664, 10665, 10666, 10667, 10668, 10670, 10671, 10672, 10674, 10675, 10676, 10677, 10678, 10679, 10681, 5866, 5869, 5870, 5871, 5872, 5873, 5874, 5876, 5877, 5879, 5880, 5881, 5885, 5886, 5887, 5889, 5899, 5900, 5910, 5958, 5960, 5962, 5965, 5967, 5968, 5969, 5974, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5991, 5992, 5993, 6008, 6018, 6019, 6020, 6021, 6022, 6028, 6030, 6033, 6034, 6035, 6051, 6052, 6053, 6054, 6056, 6057, 6058, 6060, 6062, 6064, 6065, 6066, 6067, 6068, 6070, 6071, 6072, 6073, 6076, 6077, 6078, 6081, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6115, 6116, 6117, 6118, 6120, 6121, 6122, 6123, 6124, 6127, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6154, 6155, 6156, 6158, 6159, 6160, 6161, 6162, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6187, 6201, 6203, 6220, 6227, 6228, 6232, 6233, 6288, 6301, 6302, 6303, 6304, 6306, 6307, 6308, 6313, 6314, 6315, 6316, 6318, 6319, 6325, 6326, 6327, 6328, 6329, 6335, 6336, 6337, 6338, 6341, 6342, 6349, 6350, 6351, 6352, 6355, 6356, 6360, 6362, 6364, 6366, 6372, 6373, 6374, 6375, 6377, 6380, 6381, 6383, 6385, 6387, 6388, 6389, 6391, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6485, 6486, 6487, 6488, 6489, 6491, 6492, 6493, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6535, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6545, 6546, 6547, 6548, 6549, 6550, 6552, 6553, 6554, 6556, 6557, 6558, 6560, 6561, 6562, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6606, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6623, 6626, 6627, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6642, 6644, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6724, 6727, 6738, 6740, 6742, 6745, 6747, 6750, 6755, 6760, 6761, 6768, 6770, 6774, 6776, 6783, 6785, 6794, 6800, 6805, 6809, 6811, 6812, 6815, 6819, 6820, 6824, 6825, 6826, 6829, 6831, 6833, 6835, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911, 6912, 6913, 6914, 6916, 6917, 6919, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 7003, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043, 7044, 7046, 7047, 7050, 7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099, 7100, 7101, 7103, 7104, 7105, 7106, 7108, 7109, 7110, 7112, 7113, 7114, 7115, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7143, 7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7316, 7317, 7321, 11093, 11094, 11096, 11097, 11098, 11099, 7323, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7353, 7354, 7356, 7357, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7368, 7370, 7371, 7372, 7373, 7376, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7391, 7392, 7394, 7396, 7397, 7398, 7400, 7401, 7402, 7403, 7404, 7406, 7407, 7408, 7410, 7411, 7412, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7433, 7435, 7438, 7439, 7441, 7442, 7443, 7444, 7445, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7456, 7457, 7459, 7460, 7461, 7462, 7463, 7467, 7469, 7470, 7472, 7473, 7474, 7475, 7476, 7477, 7482, 7483, 7487, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7501, 7502, 7503, 7504, 7506, 7509, 7512, 7514, 7518, 7522, 7524, 7525, 7526, 7529, 7531, 7532, 7533, 7534, 7535, 7536, 7542, 7543, 7546, 7547, 7549, 8250, 8251, 8252, 8255, 8259, 8260, 8264, 8265, 8266, 8267, 8268, 8269, 8271, 8272, 8273, 8274, 8275, 8277, 8279, 8280, 8281, 8282, 8283, 8284, 8285, 8287, 8288, 8289, 8291, 8292, 8293, 8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8303, 8304, 8305, 8306, 8307, 8308, 8314, 8316, 8319, 8334, 8339, 8340, 8341, 8344, 8345, 8347, 8357, 8360, 8361, 8364, 8365, 8368, 8376, 8377, 8385, 8388, 8401, 8413, 8434, 8435, 8438, 8439, 8441, 8442, 8446, 8447, 8449, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458, 8460, 8461, 8462, 8463, 8464, 8466, 8467, 8468, 8470, 8473, 8474, 8475, 8476, 8477, 8479, 8480, 8481, 8482, 8483, 8486, 8487, 8489, 8490, 8491, 8493, 8494, 8497, 8498, 8500, 8501, 8520, 8523, 8536, 8558, 8560, 8562, 8563, 8571, 8572, 8575, 8576, 8577, 8578, 8579, 8580, 8582, 8583, 8584, 8585, 8586, 8588, 8589, 8590, 8591, 8592, 8593, 8598, 8599, 8602, 8604, 8605, 8607, 8608, 8609, 8610, 8611, 8612, 8613, 8615, 8618, 8619, 8621, 8622, 8625, 8626, 8627]


def calculate_num_speech_act_types(data, column_name_speech_act):
    # number of speech act types at different ages
    results = []
    for age in AGES:
        data_age = data[data["age_months"] == age]

        results_age = {}
        for num_speech_act_types in range(MAX_NUM_SPEECH_ACT_TYPES):
            results_age[num_speech_act_types] = 0

        children_ids = data_age.file_id.unique()
        for child_id in children_ids:
            speech_acts_child = data_age[
                (data_age.file_id == child_id)
                & (data_age.speaker == CHILD)
                & (~data_age[column_name_speech_act].isin(["YY", "OO"]))
            ][column_name_speech_act]
            speech_act_type_counts = speech_acts_child.value_counts().to_list()

            num_produced_speech_act_types = len(
                [c for c in speech_act_type_counts if c >= 2]
            )
            if num_produced_speech_act_types >= MAX_NUM_SPEECH_ACT_TYPES:
                num_produced_speech_act_types = MAX_NUM_SPEECH_ACT_TYPES - 1

            results_age[num_produced_speech_act_types] += 1

        # Normalize children counts to get fractions
        for num_speech_act_types in results_age.keys():
            results_age[num_speech_act_types] = results_age[num_speech_act_types] / len(children_ids)

        for num_speech_act_types in range(MAX_NUM_SPEECH_ACT_TYPES):
            results.append(
                {
                    "age": age,
                    "num_types": num_speech_act_types,
                    "frac_children": results_age[num_speech_act_types],
                }
            )

    return pd.DataFrame(results)


def reproduce_num_speech_acts(data, data_whole_childes):
    results_snow = calculate_num_speech_act_types(data, SPEECH_ACT)
    results_snow["source"] = "Data from Snow et. al. (1996)"

    results_crf = calculate_num_speech_act_types(data, "y_pred")
    results_crf["source"] = "Automatically Annotated Data (New England)"

    results_childes = calculate_num_speech_act_types(
        data_whole_childes, "y_pred"
    )
    results_childes["source"] = "Automatically Annotated Data (English CHILDES)"

    results = results_snow.append(results_crf).append(results_childes)

    fig, (axes) = plt.subplots(3, 1, sharex="all")

    # Move title into figure
    plt.rcParams["axes.titley"] = 1.0
    plt.rcParams["axes.titlepad"] = -14

    for i, age in enumerate(AGES):
        results_age = results[results.age == age]

        sns.barplot(ax=axes[i], x="num_types", hue="source", y="frac_children", data=results_age)

        if i == 0:
            axes[i].legend(loc="upper right", bbox_to_anchor=(1, 0.8))
        else:
            axes[i].legend_.remove()

        axes[i].set_title(f"Age: {age} months")

        axes[i].set_xlabel("")
        axes[i].set_ylabel("")

        if age > 14:
            axes[i].set_ylim(0, 0.23)

    axes[1].set_ylabel("fraction of children")
    plt.xlabel("number of different speech acts produced")
    plt.tight_layout()
    plt.show()


def calculate_freq_distributions(
    data, column_name_speech_act, speech_acts_analyzed, age, source
):
    # number of speech act types at different ages
    data_age = data[data["age_months"] == age]

    speech_acts_children = data_age[data_age.speaker == CHILD]

    frequencies = calculate_frequencies(speech_acts_children[column_name_speech_act])

    # Filter for speech acts analyzed
    frequencies = {s: f for s, f in frequencies.items() if s in speech_acts_analyzed}

    results = []
    for s, f in frequencies.items():
        results.append(
            {
                "source": source,
                "speech_act": s,
                "frequency": f,
            }
        )

    return results


def reproduce_speech_act_distribution(data, data_whole_childes):
    speech_acts_analyzed = [
        "YY",
        "ST",
        "PR",
        "MK",
        "SA",
        "RT",
        "RP",
        "RD",
        "AA",
        "AD",
        "AC",
        "QN",
        "YQ",
        "CL",
        "SI",
    ]

    fig, axes = plt.subplots(3, 1, sharex="all")

    for i, age in enumerate(AGES):
        results_snow = calculate_freq_distributions(
            data, SPEECH_ACT, speech_acts_analyzed, age, "Data from Snow et. al. (1996)"
        )
        results_crf = calculate_freq_distributions(
            data, "y_pred", speech_acts_analyzed, age, "Automatically Annotated Data (New England)"
        )
        results_childes = calculate_freq_distributions(
            data_whole_childes, "y_pred", speech_acts_analyzed, age, "Automatically Annotated Data (English CHILDES)"
        )

        results = pd.DataFrame(results_snow + results_crf + results_childes)
        results.sort_values(by=["speech_act"], inplace=True)

        sns.barplot(
            ax=axes[i], x="speech_act", hue="source", y="frequency", data=results
        )

        # Move title into figure
        plt.rcParams["axes.titley"] = 1.0
        plt.rcParams["axes.titlepad"] = -14

        axes[i].set_title(f"Age: {age} months")

        axes[i].set_xlabel("")
        axes[i].set_ylabel("Frequency")
        if i == 0:
            axes[i].legend(bbox_to_anchor=(0.7, 0.2))
        else:
            axes[i].legend_.remove()

        if age > 14:
            axes[i].set_ylim(0, 0.3)

        # kl_divergence = entropy(
        #     list(counters["pred"].values()), qk=list(counters["gold"].values())
        # )
        # print(f"KL Divergence: {kl_divergence:.3f}")

    axes[-1].set_xlabel("Speech Act")
    plt.tight_layout()
    plt.show()


def reproduce_speech_act_age_of_acquisition(data, data_whole_childes):
    # observed_speech_acts = data[SPEECH_ACT].unique()
    # observed_speech_acts = ["ST", "MK", "SA", "RT"]
    observed_speech_acts = [
        "ST",
        "PR",
        "MK",
        "SA",
        "RT",
        "RP",
        "RD",
        "AA",
        "AD",
        "AC",
        "QN",
        "YQ",
        "CL",
        "SI",
    ]

    data_children = data[data.speaker == CHILD]
    data_children_childes = data_whole_childes[data_whole_childes.speaker == CHILD]

    fraction_producing_speech_act_snow = get_fraction_producing_speech_acts(
        data_children,
        AGES,
        observed_speech_acts,
        SPEECH_ACT,
        add_extra_datapoints=False,
    )
    fraction_producing_speech_act_snow["source"] = "Data from Snow et. al. (1996)"

    fraction_producing_speech_act_crf = get_fraction_producing_speech_acts(
        data_children, AGES, observed_speech_acts, "y_pred", add_extra_datapoints=False
    )
    fraction_producing_speech_act_crf["source"] = "Automatically Annotated Data (New England Corpus)"

    fraction_producing_speech_act_childes = get_fraction_producing_speech_acts(
        data_children_childes,
        AGES,
        observed_speech_acts,
        "y_pred",
        add_extra_datapoints=False,
    )
    fraction_producing_speech_act_childes["source"] = "Automatically Annotated Data (CHILDES)"

    fraction_data = fraction_producing_speech_act_snow.append(
        fraction_producing_speech_act_crf
    ).append(fraction_producing_speech_act_childes)

    # sns.set(rc={'figure.figsize': (10, 50)})

    g = sns.lmplot(
        data=fraction_data,
        x="month",
        y="fraction",
        hue="source",
        row="speech_act",
        logistic=True,
        ci=None,
        legend=False,
    )
    for speech_act, ax in zip(observed_speech_acts, g.axes):
        ax[0].set_title(label=speech_act, x=-0.08, y=0.2)
        ax[0].set_ylabel("")
        ax[0].set_yticks([])

    middle_graph = g.axes[round(len(observed_speech_acts) / 2)][0]
    middle_graph.set_ylabel("Fraction of children producing speech_act at least twice")
    middle_graph.yaxis.set_label_coords(-0.12, 0)

    plt.subplots_adjust(left=0.135)
    plt.show()


if __name__ == "__main__":
    # Model prediction accuracies
    print("Loading data...")
    data = pickle.load(open("data/new_england_reproduced_crf.p", "rb"))

    # map ages to corresponding bins
    data["age_months"] = data["age_months"].apply(age_bin)

    # Load annotated data for whole CHILDES
    data_whole_childes = pd.read_hdf("~/Data/speech_acts/data/speech_acts_chi.h5")

    # Filter out too short and too long transcripts
    data_whole_childes = data_whole_childes[data_whole_childes.file_id.isin(TRANSCRIPTS_CHILDES)]

    reproduce_speech_act_age_of_acquisition(data, data_whole_childes)

    reproduce_speech_act_distribution(data, data_whole_childes)

    reproduce_num_speech_acts(data, data_whole_childes)
